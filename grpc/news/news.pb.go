// Code generated by protoc-gen-go.
// source: news.proto
// DO NOT EDIT!

/*
Package news is a generated protocol buffer package.

It is generated from these files:
	news.proto

It has these top-level messages:
	MeipaiInfo
	GetNewsRequest
	GetNewsReply
	PostNewsRequest
	PsotNewsReply
	RecallNewsRequest
	RecallNewsReply
	LikeNewsRequest
	LikeNewsReply
	ForwardNewsRequest
	ForwardNewsReply
*/
package news

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type MeipaiInfo struct {
	MPid  string `protobuf:"bytes,1,opt,name=MPid,json=mPid" json:"MPid,omitempty"`
	Title string `protobuf:"bytes,2,opt,name=Title,json=title" json:"Title,omitempty"`
	Pic   []byte `protobuf:"bytes,3,opt,name=Pic,json=pic,proto3" json:"Pic,omitempty"`
}

func (m *MeipaiInfo) Reset()                    { *m = MeipaiInfo{} }
func (m *MeipaiInfo) String() string            { return proto.CompactTextString(m) }
func (*MeipaiInfo) ProtoMessage()               {}
func (*MeipaiInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type GetNewsRequest struct {
	Uid   string `protobuf:"bytes,1,opt,name=Uid,json=uid" json:"Uid,omitempty"`
	Index uint64 `protobuf:"varint,2,opt,name=Index,json=index" json:"Index,omitempty"`
}

func (m *GetNewsRequest) Reset()                    { *m = GetNewsRequest{} }
func (m *GetNewsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetNewsRequest) ProtoMessage()               {}
func (*GetNewsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type GetNewsReply struct {
	Status  string        `protobuf:"bytes,1,opt,name=Status,json=status" json:"Status,omitempty"`
	Index   uint64        `protobuf:"varint,2,opt,name=Index,json=index" json:"Index,omitempty"`
	Meipais []*MeipaiInfo `protobuf:"bytes,3,rep,name=Meipais,json=meipais" json:"Meipais,omitempty"`
}

func (m *GetNewsReply) Reset()                    { *m = GetNewsReply{} }
func (m *GetNewsReply) String() string            { return proto.CompactTextString(m) }
func (*GetNewsReply) ProtoMessage()               {}
func (*GetNewsReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GetNewsReply) GetMeipais() []*MeipaiInfo {
	if m != nil {
		return m.Meipais
	}
	return nil
}

type PostNewsRequest struct {
	Uid       string `protobuf:"bytes,1,opt,name=Uid,json=uid" json:"Uid,omitempty"`
	Devid     string `protobuf:"bytes,2,opt,name=Devid,json=devid" json:"Devid,omitempty"`
	TimeStamp string `protobuf:"bytes,3,opt,name=TimeStamp,json=timeStamp" json:"TimeStamp,omitempty"`
}

func (m *PostNewsRequest) Reset()                    { *m = PostNewsRequest{} }
func (m *PostNewsRequest) String() string            { return proto.CompactTextString(m) }
func (*PostNewsRequest) ProtoMessage()               {}
func (*PostNewsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type PsotNewsReply struct {
	Status string `protobuf:"bytes,1,opt,name=Status,json=status" json:"Status,omitempty"`
}

func (m *PsotNewsReply) Reset()                    { *m = PsotNewsReply{} }
func (m *PsotNewsReply) String() string            { return proto.CompactTextString(m) }
func (*PsotNewsReply) ProtoMessage()               {}
func (*PsotNewsReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type RecallNewsRequest struct {
	MPid string `protobuf:"bytes,1,opt,name=MPid,json=mPid" json:"MPid,omitempty"`
}

func (m *RecallNewsRequest) Reset()                    { *m = RecallNewsRequest{} }
func (m *RecallNewsRequest) String() string            { return proto.CompactTextString(m) }
func (*RecallNewsRequest) ProtoMessage()               {}
func (*RecallNewsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type RecallNewsReply struct {
	Status string `protobuf:"bytes,1,opt,name=Status,json=status" json:"Status,omitempty"`
}

func (m *RecallNewsReply) Reset()                    { *m = RecallNewsReply{} }
func (m *RecallNewsReply) String() string            { return proto.CompactTextString(m) }
func (*RecallNewsReply) ProtoMessage()               {}
func (*RecallNewsReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type LikeNewsRequest struct {
	Uid  string `protobuf:"bytes,1,opt,name=Uid,json=uid" json:"Uid,omitempty"`
	MPid string `protobuf:"bytes,2,opt,name=MPid,json=mPid" json:"MPid,omitempty"`
}

func (m *LikeNewsRequest) Reset()                    { *m = LikeNewsRequest{} }
func (m *LikeNewsRequest) String() string            { return proto.CompactTextString(m) }
func (*LikeNewsRequest) ProtoMessage()               {}
func (*LikeNewsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type LikeNewsReply struct {
	Status string `protobuf:"bytes,1,opt,name=Status,json=status" json:"Status,omitempty"`
}

func (m *LikeNewsReply) Reset()                    { *m = LikeNewsReply{} }
func (m *LikeNewsReply) String() string            { return proto.CompactTextString(m) }
func (*LikeNewsReply) ProtoMessage()               {}
func (*LikeNewsReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type ForwardNewsRequest struct {
	MPid      string `protobuf:"bytes,1,opt,name=MPid,json=mPid" json:"MPid,omitempty"`
	Uid       string `protobuf:"bytes,2,opt,name=Uid,json=uid" json:"Uid,omitempty"`
	Devid     string `protobuf:"bytes,3,opt,name=Devid,json=devid" json:"Devid,omitempty"`
	TimeStamp string `protobuf:"bytes,4,opt,name=TimeStamp,json=timeStamp" json:"TimeStamp,omitempty"`
}

func (m *ForwardNewsRequest) Reset()                    { *m = ForwardNewsRequest{} }
func (m *ForwardNewsRequest) String() string            { return proto.CompactTextString(m) }
func (*ForwardNewsRequest) ProtoMessage()               {}
func (*ForwardNewsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type ForwardNewsReply struct {
	Status string `protobuf:"bytes,1,opt,name=Status,json=status" json:"Status,omitempty"`
}

func (m *ForwardNewsReply) Reset()                    { *m = ForwardNewsReply{} }
func (m *ForwardNewsReply) String() string            { return proto.CompactTextString(m) }
func (*ForwardNewsReply) ProtoMessage()               {}
func (*ForwardNewsReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func init() {
	proto.RegisterType((*MeipaiInfo)(nil), "news.MeipaiInfo")
	proto.RegisterType((*GetNewsRequest)(nil), "news.GetNewsRequest")
	proto.RegisterType((*GetNewsReply)(nil), "news.GetNewsReply")
	proto.RegisterType((*PostNewsRequest)(nil), "news.PostNewsRequest")
	proto.RegisterType((*PsotNewsReply)(nil), "news.PsotNewsReply")
	proto.RegisterType((*RecallNewsRequest)(nil), "news.RecallNewsRequest")
	proto.RegisterType((*RecallNewsReply)(nil), "news.RecallNewsReply")
	proto.RegisterType((*LikeNewsRequest)(nil), "news.LikeNewsRequest")
	proto.RegisterType((*LikeNewsReply)(nil), "news.LikeNewsReply")
	proto.RegisterType((*ForwardNewsRequest)(nil), "news.ForwardNewsRequest")
	proto.RegisterType((*ForwardNewsReply)(nil), "news.ForwardNewsReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for NewsServer service

type NewsServerClient interface {
	GetNews(ctx context.Context, in *GetNewsRequest, opts ...grpc.CallOption) (*GetNewsReply, error)
	GetMyNews(ctx context.Context, in *GetNewsRequest, opts ...grpc.CallOption) (*GetNewsReply, error)
	PostNews(ctx context.Context, in *PostNewsRequest, opts ...grpc.CallOption) (*PsotNewsReply, error)
	RecallNews(ctx context.Context, in *RecallNewsRequest, opts ...grpc.CallOption) (*RecallNewsReply, error)
	LikeNews(ctx context.Context, in *LikeNewsRequest, opts ...grpc.CallOption) (*LikeNewsReply, error)
	ForwardNews(ctx context.Context, in *ForwardNewsRequest, opts ...grpc.CallOption) (*ForwardNewsReply, error)
}

type newsServerClient struct {
	cc *grpc.ClientConn
}

func NewNewsServerClient(cc *grpc.ClientConn) NewsServerClient {
	return &newsServerClient{cc}
}

func (c *newsServerClient) GetNews(ctx context.Context, in *GetNewsRequest, opts ...grpc.CallOption) (*GetNewsReply, error) {
	out := new(GetNewsReply)
	err := grpc.Invoke(ctx, "/news.NewsServer/GetNews", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsServerClient) GetMyNews(ctx context.Context, in *GetNewsRequest, opts ...grpc.CallOption) (*GetNewsReply, error) {
	out := new(GetNewsReply)
	err := grpc.Invoke(ctx, "/news.NewsServer/GetMyNews", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsServerClient) PostNews(ctx context.Context, in *PostNewsRequest, opts ...grpc.CallOption) (*PsotNewsReply, error) {
	out := new(PsotNewsReply)
	err := grpc.Invoke(ctx, "/news.NewsServer/PostNews", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsServerClient) RecallNews(ctx context.Context, in *RecallNewsRequest, opts ...grpc.CallOption) (*RecallNewsReply, error) {
	out := new(RecallNewsReply)
	err := grpc.Invoke(ctx, "/news.NewsServer/RecallNews", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsServerClient) LikeNews(ctx context.Context, in *LikeNewsRequest, opts ...grpc.CallOption) (*LikeNewsReply, error) {
	out := new(LikeNewsReply)
	err := grpc.Invoke(ctx, "/news.NewsServer/LikeNews", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsServerClient) ForwardNews(ctx context.Context, in *ForwardNewsRequest, opts ...grpc.CallOption) (*ForwardNewsReply, error) {
	out := new(ForwardNewsReply)
	err := grpc.Invoke(ctx, "/news.NewsServer/ForwardNews", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for NewsServer service

type NewsServerServer interface {
	GetNews(context.Context, *GetNewsRequest) (*GetNewsReply, error)
	GetMyNews(context.Context, *GetNewsRequest) (*GetNewsReply, error)
	PostNews(context.Context, *PostNewsRequest) (*PsotNewsReply, error)
	RecallNews(context.Context, *RecallNewsRequest) (*RecallNewsReply, error)
	LikeNews(context.Context, *LikeNewsRequest) (*LikeNewsReply, error)
	ForwardNews(context.Context, *ForwardNewsRequest) (*ForwardNewsReply, error)
}

func RegisterNewsServerServer(s *grpc.Server, srv NewsServerServer) {
	s.RegisterService(&_NewsServer_serviceDesc, srv)
}

func _NewsServer_GetNews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNewsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServerServer).GetNews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/news.NewsServer/GetNews",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServerServer).GetNews(ctx, req.(*GetNewsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NewsServer_GetMyNews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNewsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServerServer).GetMyNews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/news.NewsServer/GetMyNews",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServerServer).GetMyNews(ctx, req.(*GetNewsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NewsServer_PostNews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostNewsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServerServer).PostNews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/news.NewsServer/PostNews",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServerServer).PostNews(ctx, req.(*PostNewsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NewsServer_RecallNews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecallNewsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServerServer).RecallNews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/news.NewsServer/RecallNews",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServerServer).RecallNews(ctx, req.(*RecallNewsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NewsServer_LikeNews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeNewsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServerServer).LikeNews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/news.NewsServer/LikeNews",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServerServer).LikeNews(ctx, req.(*LikeNewsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NewsServer_ForwardNews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForwardNewsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServerServer).ForwardNews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/news.NewsServer/ForwardNews",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServerServer).ForwardNews(ctx, req.(*ForwardNewsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NewsServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "news.NewsServer",
	HandlerType: (*NewsServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNews",
			Handler:    _NewsServer_GetNews_Handler,
		},
		{
			MethodName: "GetMyNews",
			Handler:    _NewsServer_GetMyNews_Handler,
		},
		{
			MethodName: "PostNews",
			Handler:    _NewsServer_PostNews_Handler,
		},
		{
			MethodName: "RecallNews",
			Handler:    _NewsServer_RecallNews_Handler,
		},
		{
			MethodName: "LikeNews",
			Handler:    _NewsServer_LikeNews_Handler,
		},
		{
			MethodName: "ForwardNews",
			Handler:    _NewsServer_ForwardNews_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("news.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 431 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x54, 0xcf, 0xaf, 0xd2, 0x40,
	0x10, 0x86, 0xb6, 0x80, 0x9d, 0xf7, 0x9e, 0xe0, 0xf8, 0xc0, 0xa6, 0xf1, 0x40, 0xf6, 0x02, 0x72,
	0xe0, 0x80, 0x31, 0x70, 0x32, 0x31, 0x31, 0x22, 0x89, 0x98, 0xa6, 0x60, 0x3c, 0x57, 0xba, 0xc6,
	0x8d, 0xfd, 0x65, 0x77, 0x01, 0xf9, 0xbb, 0xfd, 0x07, 0x4c, 0x5b, 0x16, 0x4a, 0xa9, 0x25, 0xde,
	0x3a, 0xb3, 0xdf, 0xcc, 0x37, 0xdf, 0xcc, 0x97, 0x02, 0x04, 0x74, 0xcf, 0xc7, 0x51, 0x1c, 0x8a,
	0x10, 0xb5, 0xe4, 0x9b, 0x7c, 0x04, 0x58, 0x52, 0x16, 0x39, 0x6c, 0x11, 0x7c, 0x0f, 0x11, 0x41,
	0x5b, 0x5a, 0xcc, 0x35, 0xea, 0xfd, 0xfa, 0x50, 0xb7, 0x35, 0xdf, 0x62, 0x2e, 0x3e, 0x42, 0x63,
	0xcd, 0x84, 0x47, 0x0d, 0x25, 0x4d, 0x36, 0x44, 0x12, 0x60, 0x07, 0x54, 0x8b, 0x6d, 0x0c, 0xb5,
	0x5f, 0x1f, 0xde, 0xdb, 0x6a, 0xc4, 0x36, 0x64, 0x06, 0x4f, 0xe7, 0x54, 0x7c, 0xa6, 0x7b, 0x6e,
	0xd3, 0x5f, 0x5b, 0xca, 0x45, 0x82, 0xf9, 0x72, 0x6a, 0xa6, 0x6e, 0xb3, 0x5e, 0x8b, 0xc0, 0xa5,
	0xbf, 0xd3, 0x5e, 0x9a, 0xdd, 0x60, 0x49, 0x40, 0x7e, 0xc0, 0xfd, 0xa9, 0x32, 0xf2, 0x0e, 0xd8,
	0x83, 0xe6, 0x4a, 0x38, 0x62, 0xcb, 0x8f, 0xa5, 0x4d, 0x9e, 0x46, 0xe5, 0xd5, 0x38, 0x82, 0x56,
	0xa6, 0x80, 0x1b, 0x6a, 0x5f, 0x1d, 0xde, 0x4d, 0x3a, 0xe3, 0x54, 0xe5, 0x59, 0x96, 0xdd, 0xf2,
	0x33, 0x00, 0xf9, 0x0a, 0x6d, 0x2b, 0xe4, 0xb7, 0x87, 0x7c, 0x4f, 0x77, 0xcc, 0x95, 0x82, 0xdd,
	0x24, 0xc0, 0x97, 0xa0, 0xaf, 0x99, 0x4f, 0x57, 0xc2, 0xf1, 0xa3, 0x54, 0xb6, 0x6e, 0xeb, 0x42,
	0x26, 0xc8, 0x00, 0x1e, 0x2c, 0x1e, 0xde, 0xd6, 0x40, 0x06, 0xf0, 0xcc, 0xa6, 0x1b, 0xc7, 0xf3,
	0xf2, 0x33, 0x94, 0xac, 0x9d, 0xbc, 0x82, 0x76, 0x1e, 0x58, 0xd5, 0x73, 0x0a, 0xed, 0x4f, 0xec,
	0x27, 0xad, 0x56, 0x25, 0x39, 0x94, 0x1c, 0xc7, 0x00, 0x1e, 0xce, 0x85, 0x55, 0x0c, 0x01, 0xe0,
	0x87, 0x30, 0xde, 0x3b, 0xb1, 0x7b, 0x63, 0x6c, 0x49, 0xac, 0x94, 0xac, 0x53, 0xfd, 0xe7, 0x3a,
	0xb5, 0xe2, 0x3a, 0x47, 0xd0, 0xb9, 0xe0, 0xab, 0x98, 0x6d, 0xf2, 0x47, 0x01, 0x48, 0x50, 0x2b,
	0x1a, 0xef, 0x68, 0x8c, 0x6f, 0xa0, 0x75, 0x34, 0x13, 0x3e, 0x66, 0x46, 0xb8, 0x74, 0xa5, 0x89,
	0x85, 0x6c, 0xe4, 0x1d, 0x48, 0x0d, 0xa7, 0xa0, 0xcf, 0xa9, 0x58, 0x1e, 0xfe, 0xbb, 0x70, 0x06,
	0x4f, 0xa4, 0xa5, 0xb0, 0x9b, 0x21, 0x0a, 0x16, 0x33, 0x9f, 0x1f, 0xd3, 0x79, 0x83, 0x90, 0x1a,
	0xbe, 0x05, 0x38, 0x5f, 0x18, 0x5f, 0x64, 0xa0, 0x2b, 0x73, 0x98, 0xdd, 0xeb, 0x87, 0x13, 0xb3,
	0xbc, 0x9e, 0x64, 0x2e, 0xd8, 0x40, 0x32, 0x5f, 0x1c, 0x99, 0xd4, 0xf0, 0x1d, 0xdc, 0xe5, 0xd6,
	0x8b, 0x46, 0x86, 0xba, 0xbe, 0xb0, 0xd9, 0x2b, 0x79, 0x49, 0x5b, 0x7c, 0x6b, 0xa6, 0x3f, 0x91,
	0xd7, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x78, 0xfe, 0xc3, 0x91, 0x52, 0x04, 0x00, 0x00,
}
